@model IEnumerable<BeanSceneMVC.Models.Reservation>
@using Microsoft.AspNetCore.Identity


@inject SignInManager<ApplicationUser> SignInManager
    @inject UserManager<ApplicationUser> UserManager

@{
    
    //Get the currently logged-in user (and pass through the UserManager context)
        ApplicationUser user = await UserManager.GetUserAsync(User) ?? new ApplicationUser();
        user.UserManager = UserManager;
        bool isReadOnly = !user.IsManager && !user.IsStaff;
    }

@{
    ViewData["Title"] = "Manage reservation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>@ViewData["Title"]</h1>



<p>
    <a asp-action="Create"class="btn btn-primary">+ Add reservation</a>
</p>

@if (user.IsManager)
{ 
<div id="chartContainer" style="height: 450px; width: 100%;"></div>
}

<table class="table">
    <thead>
        <tr>
            <th>
               @* @Html.DisplayNameFor(model => model.NumberOfPeople)*@
               #
            </th>
            <th>
              @*  @Html.DisplayNameFor(model => model.FirstName)*@
                @Html.DisplayNameFor(model => model.Sitting)
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.LastName)*@
                Time duration
            </th>
            @*<th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Phone)
            </th>*@
            <th>
               @* @Html.DisplayNameFor(model => model.Note)*@
                # People
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
           @* <th>
                @Html.DisplayNameFor(model => model.Source)
            </th>*@
            <th>
               @* @Html.DisplayNameFor(model => model.Sitting)*@
                @Html.DisplayNameFor(model => model.FullName)
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.StartTime)*@
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
             @*   @Html.DisplayNameFor(model => model.EndTime)*@
                @Html.DisplayNameFor(model => model.Phone)
            </th>
            @*<th>
                @Html.DisplayNameFor(model => model.User)
            </th>*@
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
               @* @Html.DisplayFor(modelItem => item.NumberOfPeople)*@
                    @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
               @* @Html.DisplayFor(modelItem => item.FirstName)*@
                    @Html.DisplayFor(modelItem => item.Sitting.Date)
                    -
                    @Html.DisplayFor(modelItem => item.Sitting.SittingType.Name)
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.LastName)*@
                    @Html.DisplayFor(modelItem => item.StartTime.TimeFormatted)
                    -
                    @Html.DisplayFor(modelItem => item.EndTime.TimeFormatted)
            </td>
        @*    <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>*@
            <td>
              @*  @Html.DisplayFor(modelItem => item.Phone)*@
                    @Html.DisplayFor(modelItem => item.NumberOfPeople)
            </td>
            <td>
             @*   @Html.DisplayFor(modelItem => item.Note)
            </td>
            <td>*@
                @Html.DisplayFor(modelItem => item.Status)
            </td>
           @* <td>
                @Html.DisplayFor(modelItem => item.Source)
            </td>*@
            <td>
               @* @Html.DisplayFor(modelItem => item.Sitting.Date)*@
                    @Html.DisplayFor(modelItem => item.FullName)
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.StartTime.Time)*@
                    @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
              @*  @Html.DisplayFor(modelItem => item.EndTime.Time)*@
                    @Html.DisplayFor(modelItem => item.Phone)
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.User.Id)*@
                  @*  @if (item.User != null)
                    {
                        @Html.DisplayFor(modelItem => item.User.Id)
                    }
                    else
                    {
                        @:N/A
                    }*@

            </td>
                    @if(user.IsManager||user.IsStaff)
                    { 
                    <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-secondary " title="Edit"><i class="bi bi-pencil-fill" aria-label="Edit"></i></a> |
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-primary " title="Details"><i class="bi bi-book-fill" aria-hidden="true"></i></a> |
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger" title="Delete"><i class="bi bi-trash-fill" aria-label="Delete"></i></a>
            </td>
                    }
        </tr>
}
        
    </tbody>
</table>
<script src="https://cdn.canvasjs.com/canvasjs.min.js"></script>
<script>
    window.onload = function () {
        var chartData = @Html.Raw(ViewBag.ChartData ?? "[]");
        var pending = @Html.Raw(ViewBag.ChartDataPending ?? "0");
            var chart = new CanvasJS.Chart("chartContainer", {
                animationEnabled: true,
                title: {
                    text: `${pending} reservations to confirm for the next 14 days!               Reservation status for the next 14 days:`
                },
                data: [{
                    type: "pie",
                    startAngle: 240,
                    yValueFormatString: "##0.00\"%\"",
                    indexLabel: "{label} {y}",
                    dataPoints: chartData
                }]
            });
            chart.render();
        }
  

</script>